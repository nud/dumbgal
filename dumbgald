#!/usr/bin/python3
# -*- coding: utf-8 -*- ex:set ts=4 sw=4:

import os
import sys
import argparse
from flask import Flask, g, render_template, safe_join, send_from_directory, \
                 redirect, request, url_for
from PIL import Image

from dumbgal.database import TagStore

parser = argparse.ArgumentParser(prog="dumbgalsh", description="Dumb Gallery support tool")
parser.add_argument('-r', '--root', dest='root_dir', default='.', help='root data dir')
args = parser.parse_args(sys.argv[1:])

app = Flask(__name__, instance_path=os.path.abspath(args.root_dir))

cache_dir = os.path.join(app.instance_path, 'cache')
gallery_dir = os.path.join(app.instance_path, 'gallery')
db_filename = os.path.join(app.instance_path, 'meta.db')

def get_store():
    if not hasattr(g, '_tagstore'):
        g._tagstore = TagStore(db_filename)
    return g._tagstore

@app.teardown_appcontext
def close_tagstore(exception):
    if hasattr(g, '_tagstore'):
        g._tagstore.close()

@app.route('/static/<path:filename>')
def static_files(filename):
    return send_from_directory(os.path.join(app.instance_path, 'static'), filename)

@app.route('/image/<path:filename>_<any(h,w,""):mode><int:size>.jpg')
def images(filename, size, mode):
    orig_path = safe_join(gallery_dir, filename + '.jpg')
    cache_path = safe_join(cache_dir, filename + '_%s%d.jpg' % (mode, size))

    if not os.path.exists(cache_path) or os.stat(cache_path).st_mtime < os.stat(orig_path).st_mtime:
        img = Image.open(orig_path)

        if mode == 'h':
            t = (img.size[0], size)
        elif mode == 'w':
            t = (size, img.size[1])
        else:
            t = (size, size)

        img.thumbnail(t, Image.ANTIALIAS)
        img.save(cache_path, 'JPEG')

    return send_from_directory (cache_dir, filename + '_%s%d.jpg' % (mode, size))

@app.route('/image/<path:filename>')
def image_pages(filename):
    store = get_store()
    tags = store.list_tags_for_image(filename)
    all_tags = [tag['name'] for tag in store.list_all_tags() if tag['name'] not in tags]
    return render_template('image_wrapper.html', filename=filename,
                           tags=tags, all_tags=all_tags)

@app.route('/image/<path:filename>/add-tag', methods=['POST'])
def add_tag(filename):
    get_store().add_tag(filename, request.form['tag'])
    return redirect(url_for('image_pages', filename=filename))

@app.route('/tag/<tag>')
def tag_pages(tag):
    files = get_store().list_images_for_tag(tag)
    return render_template('index.html', files=files, tags=[])

@app.route('/')
def serve_index():
    store = get_store()
    tags = store.list_all_tags()
    files = store.list_all_images()

    return render_template('index.html', files=files, tags=tags)

if __name__ == '__main__':
    app.debug = True
    app.run()
